package org.wahlzeit.model;

import java.awt.*;
import java.sql.*;
import java.net.*;
import java.lang.Math.*;
import java.util.LinkedList;
import java.util.Objects;

import org.wahlzeit.services.*;
import org.wahlzeit.utils.*;

//The conversion methods and the doGetCartesianDistance method implement
//the subclass specific behavior used in the abstract superclass.
@PatternInstance(
        patternName = "Template Method",
        participants = {
                "ConcreteClass"
        }
)
@PatternInstance(
        patternName = "Value Object",
        participants = {
                "ValueObject"
        }
)
public class CartesianCoordinate extends AbstractCoordinate{

    //This is protected and not private to enable access during tests
    protected static LinkedList<CartesianCoordinate> coordList = new LinkedList<CartesianCoordinate>();

    private final double x;
    private final double y;
    private final double z;

    public static CartesianCoordinate getCartesianCoordinate(double x, double y, double z){
        //Preconditions: None, all Coordinates are valid
        //Checking if Coordinate already present
        for (CartesianCoordinate c:coordList) {
            if(Math.abs(c.x - x)<=epsilon && Math.abs(c.y - y)<=epsilon && Math.abs(c.z - z)<=epsilon)return c;
        }
        //Coordinate not present, creating a new one
        return new CartesianCoordinate(x,y,z);
    }

    private CartesianCoordinate(double x, double y, double z){
        //Preconditions: None, all Coordinates are valid
        this.x = x;
        this.y = y;
        this.z = z;
        //Postconditions: None
        assertClassInvariants();
        //New Coordinate is added to the shared list
        coordList.add(this);
    }

    public double getX(){
        //Preconditions: None
        //Postconditions: None
        assertClassInvariants();
        return x;
    }

    public double getY(){
        //Preconditions: None
        //Postconditions: None
        assertClassInvariants();
        return y;
    }

    public double getZ(){
        //Preconditions: None
        //Postconditions: None
        assertClassInvariants();
        return z;
    }

    public CartesianCoordinate setX(double x){
        assertClassInvariants();
        //Preconditions: None, all Coordinates are valid
        CartesianCoordinate changedCoord = getCartesianCoordinate(x, this.y, this.z);
        //Postconditions: Changed Coordinate needs to be valid
        changedCoord.assertClassInvariants();
        return changedCoord;
    }

    public CartesianCoordinate setY(double y){
        assertClassInvariants();
        //Preconditions: None, all Coordinates are valid
        CartesianCoordinate changedCoord = getCartesianCoordinate(this.x, y, this.z);
        //Postconditions: Changed Coordinate needs to be valid
        changedCoord.assertClassInvariants();
        return changedCoord;
    }

    public CartesianCoordinate setZ(double z){
        assertClassInvariants();
        //Preconditions: None, all Coordinates are valid
        CartesianCoordinate changedCoord = getCartesianCoordinate(this.x, this.y, z);
        //Postconditions: Changed Coordinate needs to be valid
        changedCoord.assertClassInvariants();
        return changedCoord;
    }

    @Override
    public boolean equals(Object o) {
        assertClassInvariants();
        /*//Preconditions: Object must not be null, Object Class must match own Class, Class Invariants of the Object must hold
        if (o == null) {
            return false;
        }

        if (o.getClass() != this.getClass()) {
            return false;
        }

        CartesianCoordinate compare = (CartesianCoordinate) o;
        //Since compare is not generated by a method asserting the Class Invariants, the check is necessary here
        compare.assertClassInvariants();

        //Postconditions: None
        return isEqual(compare);*/
        return this == o;
    }

    @Override
    public CartesianCoordinate asCartesianCoordinate() {
        assertClassInvariants();
        //Preconditions: None
        //Postconditions: None
        return this;
    }

    @Override
    public SphericCoordinate asSphericCoordinate() {
        assertClassInvariants();
        //Preconditions: None
        //r = sqrt(x² + y² + z²)
        double r = Math.sqrt(x*x + y*y + z*z);
        //cos(theta) = z/r;
        double theta = Math.acos(z/r);
        //tan(phi) = y/x;
        double phi = Math.atan(y/x);
        SphericCoordinate converted = SphericCoordinate.getSphericCoordinate(phi, theta, r);
        //Postconditions: None (Theoretically: New coordinate must be equal to the old coordinate)
        //HOWEVER: This leads to a Stackoverflow, as we cannot check if the new Coordinate is
        //Equal without calling a conversion method, which then again needs to make this assertion.
        //As such this postcondition is not asserted.
        return converted;
    }

    protected double doGetCartesianDistance(CartesianCoordinate c){
        //Assertion of Class Invariants is not necessary here, as they are already checked in
        //the conversion methods in the call of getCartesianDistance in AbstractCoordinate
        //Preconditions: None, check if argument is null is handled in getCartesianDistance
        //Postconditions: None
        return Math.sqrt(Math.pow(c.x - this.x, 2) + Math.pow(c.y - this.y, 2) + Math.pow(c.z - this.z, 2));
    }

    @Override
    public int hashCode(){
        assertClassInvariants();
        //Preconditions: None
        //Postconditions: None
        //return Objects.hash(x, y, z);
        return super.hashCode();
    }

    @Override
    public Object clone(){
        return this;
    }

    //Since this is a shared value object, a simple "return this == c.asCartesianCoordinate()"
    // would suffice, i left the method to preserve a way to check attribute equality
    @Override
    public boolean isEqual(Coordinate c) {
        assertClassInvariants();
        //Preconditions: None
        if(c == null) {
            return false;
        }
        CartesianCoordinate other = c.asCartesianCoordinate();
        if(Math.abs(other.x - this.x)>epsilon || Math.abs(other.y - this.y)>epsilon || Math.abs(other.z - this.z)>epsilon)return false;
        //Postconditions: None
        return true;
    }

    @Override
    public void assertClassInvariants() {
        //Any cartesian coordinate is valid, so there is no invariant to assert.
        //As such, this method as well as all calls to it are only here for completeness
    }
}